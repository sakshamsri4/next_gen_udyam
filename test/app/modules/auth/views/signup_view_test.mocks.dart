// Mocks generated by Mockito 5.4.5 from annotations
// in next_gen/test/app/modules/auth/views/signup_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i9;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:flutter/material.dart' as _i3;
import 'package:get/get.dart' as _i2;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:next_gen/app/modules/auth/controllers/auth_controller.dart'
    as _i4;
import 'package:next_gen/app/modules/auth/models/user_model.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRx_0<T> extends _i1.SmartFake implements _i2.Rx<T> {
  _FakeRx_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxBool_1 extends _i1.SmartFake implements _i2.RxBool {
  _FakeRxBool_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxString_2 extends _i1.SmartFake implements _i2.RxString {
  _FakeRxString_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingController_3 extends _i1.SmartFake
    implements _i3.TextEditingController {
  _FakeTextEditingController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_4<T> extends _i1.SmartFake
    implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthController extends _i1.Mock implements _i4.AuthController {
  MockAuthController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Rx<_i5.User?> get firebaseUser => (super.noSuchMethod(
        Invocation.getter(#firebaseUser),
        returnValue: _FakeRx_0<_i5.User?>(
          this,
          Invocation.getter(#firebaseUser),
        ),
      ) as _i2.Rx<_i5.User?>);

  @override
  _i2.Rx<_i6.UserModel?> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeRx_0<_i6.UserModel?>(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.Rx<_i6.UserModel?>);

  @override
  _i2.RxBool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: _FakeRxBool_1(
          this,
          Invocation.getter(#isLoading),
        ),
      ) as _i2.RxBool);

  @override
  _i2.RxBool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: _FakeRxBool_1(
          this,
          Invocation.getter(#isLoggedIn),
        ),
      ) as _i2.RxBool);

  @override
  _i2.RxString get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _FakeRxString_2(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as _i2.RxString);

  @override
  _i3.TextEditingController get emailController => (super.noSuchMethod(
        Invocation.getter(#emailController),
        returnValue: _FakeTextEditingController_3(
          this,
          Invocation.getter(#emailController),
        ),
      ) as _i3.TextEditingController);

  @override
  _i3.TextEditingController get passwordController => (super.noSuchMethod(
        Invocation.getter(#passwordController),
        returnValue: _FakeTextEditingController_3(
          this,
          Invocation.getter(#passwordController),
        ),
      ) as _i3.TextEditingController);

  @override
  _i3.TextEditingController get nameController => (super.noSuchMethod(
        Invocation.getter(#nameController),
        returnValue: _FakeTextEditingController_3(
          this,
          Invocation.getter(#nameController),
        ),
      ) as _i3.TextEditingController);

  @override
  _i2.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> registerWithEmailAndPassword() => (super.noSuchMethod(
        Invocation.method(
          #registerWithEmailAndPassword,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> signInWithEmailAndPassword() => (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resetPassword() => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Disposer addListener(_i8.GetStateUpdate? listener) => (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i8.Disposer);

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i9.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Disposer addListenerId(
    Object? key,
    _i8.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i8.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInterface extends _i1.Mock implements _i2.GetInterface {
  MockGetInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SmartManagement get smartManagement => (super.noSuchMethod(
        Invocation.getter(#smartManagement),
        returnValue: _i2.SmartManagement.full,
      ) as _i2.SmartManagement);

  @override
  set smartManagement(_i2.SmartManagement? _smartManagement) =>
      super.noSuchMethod(
        Invocation.setter(
          #smartManagement,
          _smartManagement,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set routerDelegate(_i3.RouterDelegate<dynamic>? _routerDelegate) =>
      super.noSuchMethod(
        Invocation.setter(
          #routerDelegate,
          _routerDelegate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set routeInformationParser(
          _i3.RouteInformationParser<dynamic>? _routeInformationParser) =>
      super.noSuchMethod(
        Invocation.setter(
          #routeInformationParser,
          _routeInformationParser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLogEnable => (super.noSuchMethod(
        Invocation.getter(#isLogEnable),
        returnValue: false,
      ) as bool);

  @override
  set isLogEnable(bool? _isLogEnable) => super.noSuchMethod(
        Invocation.setter(
          #isLogEnable,
          _isLogEnable,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.LogWriterCallback get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: (
          String text, {
          bool? isError,
        }) {},
      ) as _i2.LogWriterCallback);

  @override
  set log(_i2.LogWriterCallback? _log) => super.noSuchMethod(
        Invocation.setter(
          #log,
          _log,
        ),
        returnValueForMissingStub: null,
      );
}
