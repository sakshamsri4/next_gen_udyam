// Mocks generated by Mockito 5.4.5 from annotations
// in next_gen/test/core/storage/storage_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:next_gen/core/services/logger_service.dart' as _i5;
import 'package:next_gen/core/storage/hive_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HiveManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveManager extends _i1.Mock implements _i3.HiveManager {
  MockHiveManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.Box<T> getBox<T>(String? boxName) => (super.noSuchMethod(
        Invocation.method(
          #getBox,
          [boxName],
        ),
        returnValue: _FakeBox_0<T>(
          this,
          Invocation.method(
            #getBox,
            [boxName],
          ),
        ),
      ) as _i2.Box<T>);

  @override
  T? getValue<T>(
    String? boxName,
    dynamic key, {
    T? defaultValue,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getValue,
        [
          boxName,
          key,
        ],
        {#defaultValue: defaultValue},
      )) as T?);

  @override
  _i4.Future<void> putValue<T>(
    String? boxName,
    dynamic key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putValue,
          [
            boxName,
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteValue<T>(
    String? boxName,
    dynamic key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteValue,
          [
            boxName,
            key,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearBox<T>(String? boxName) => (super.noSuchMethod(
        Invocation.method(
          #clearBox,
          [boxName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> closeBox(String? boxName) => (super.noSuchMethod(
        Invocation.method(
          #closeBox,
          [boxName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> closeAllBoxes() => (super.noSuchMethod(
        Invocation.method(
          #closeAllBoxes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i5.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> readLogFile() => (super.noSuchMethod(
        Invocation.method(
          #readLogFile,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #readLogFile,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> clearLogFile() => (super.noSuchMethod(
        Invocation.method(
          #clearLogFile,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void t(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #t,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void v(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    String? message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void json(
    String? message,
    Object? object,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #json,
          [
            message,
            object,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
